service: lla-api
frameworkVersion: "3"

provider:
  name: aws
  deploymentMethod: direct
  region: us-east-2
  runtime: nodejs16.x
  logRetentionInDays: 30
  iam:
    role:
      name: lla-api-lambda-role
      statements:
        - Effect: Allow
          Action:
            - "s3:*"
          Resource: "*"
        - Effect: Allow
          Action:
            - "cloudwatch:*"
            - "logs:*"
          Resource: "*"
        - Effect: Allow
          Action:
            - "lambda:InvokeFunction"
          Resource: "*"
  deploymentBucket:
    blockPublicAccess: true
    serverSideEncryption: AES256
  httpApi:
    name: "LLA"
    cors: true
    authorizers:
      jwtAuthorizer:
        type: jwt
        name: jwtAuthorizer
        functionName: jwtAuthorizer
        issuerUrl: ${env:FIREBASE_ISSUER_URL}
        audience:
          - ${env:FIREBASE_AUDIENCE}
        resultTtlInSeconds: 300
        identitySource:
          - $request.header.Authorization

plugins:
  - serverless-auto-swagger
  - serverless-prune-plugin
  - serverless-webpack
  - serverless-dotenv-plugin
  - serverless-offline

custom:
  serverless-offline:
    ignoreJWTSignature: true
  prune:
    automatic: true
    number: 3
  webpack:
    excludeRegex: \.ts|test|\.map
    includeModules:
      forceExclude:
        - aws-sdk
  autoswagger:
    typefiles: ['./src/types/api-types.d.ts']
    excludeStages: ['prd', 'uat']

package:
  excludeDevDependencies: true
  exclude:
    - ./**
  include:
    - ./src/**.ts

functions:
  jwtAuthorizer:
    handler: src/functions/authorizer/handler.handler
    description: Authorizer for JWT integration using Firebase
  post-actas:
    name: "post-actas"
    description: Guarda y procesa la imagen que suben los fiscales
    handler: src/functions/actas/post.handler
    events:
      - httpApi:
          method: POST
          path: /v1/actas
          authorizer:
            name: jwtAuthorizer
            type: jwt
          consumes:
            - "multipart/form-data"
          bodyType: "ActasRequest"
          responses:
            default: {}
            "201":
              name: "Content Accepted"
              bodyType: "ActasResponse"
  list-actas:
    handler: src/functions/actas/list.handler
    description: Ver actas cargadas por el usuario
    events:
      - httpApi:
          method: GET
          path: /v1/actas
          authorizer:
            name: jwtAuthorizer
            type: jwt
          responses:
            default: {}
            "200":
              name: "OK"
              bodyType: "ListActasResponse"
  get-actas:
    handler: src/functions/actas/get.handler
    description: Ver informacion del acta para la mesa
    events:
      - httpApi:
          method: GET
          path: /v1/actas/{mesaId}
          authorizer:
            name: jwtAuthorizer
            type: jwt
          responses:
            default: {}
            "200":
              name: "OK"
              bodyType: "EscrutionioMesaResponse"
  data-processing-worker:
    handler: src/functions/data-processing/worker.handler
    description: Events worker
    events:
      - sqs:
          arn: !GetAtt MainQueue.Arn
          batchSize: 1
          maximumConcurrency: 2
