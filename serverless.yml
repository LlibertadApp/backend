service: lla-api
frameworkVersion: "3"

provider:
  name: aws
  region: ${env:AWS_REGION}
  deploymentMethod: direct
  deploymentBucket:
    blockPublicAccess: true
    serverSideEncryption: AES256
  tags:
    stage: ${self:custom.stageName}
  runtime: nodejs18.x
  logRetentionInDays: 30
  iam:
    role:
      name: lla-api-lambda-role
      statements:
        - Effect: Allow
          Action:
            - "s3:*"
          Resource: "*"
        - Effect: Allow
          Action:
            - "cloudwatch:*"
            - "logs:*"
          Resource: "*"
        - Effect: Allow
          Action:
            - "lambda:InvokeFunction"
          Resource: "*"
  httpApi:
    name: "LLA"
    cors: true
    authorizers:
      jwtAuthorizer:
        type: jwt
        name: jwtAuthorizer
        functionName: jwtAuthorizer
        issuerUrl: ${env:FIREBASE_ISSUER_URL}
        audience:
          - ${env:FIREBASE_AUDIENCE}
        resultTtlInSeconds: 300
        identitySource:
          - $request.header.Authorization

plugins:
  - serverless-auto-swagger
  - serverless-prune-plugin
  - serverless-webpack
  - serverless-dotenv-plugin
  - serverless-offline

custom:
  stageName: ${opt:stage, 'dev'}
  serverless-offline:
    ignoreJWTSignature: true
  prune:
    automatic: true
    number: 3
  webpack:
    excludeRegex: \.ts|test|\.map
    includeModules:
      forceExclude:
        - aws-sdk
  autoswagger:
    typefiles: ['./src/types/api-types.d.ts']
    excludeStages: ['prd', 'uat']

package:
  excludeDevDependencies: true
  exclude:
    - ./**
  include:
    - ./src/**.ts

resources:
  Resources:
    MainQueue:
      Type: AWS::SQS::Queue
      DependsOn: "DeadLetterQueue"
      Properties:
        QueueName: ${self:service}-${self:custom.stageName}-main
        DelaySeconds: 0
        MessageRetentionPeriod: 345600 # 4 days
        VisibilityTimeout: 90
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - "DeadLetterQueue"
              - "Arn"
          maxReceiveCount: 2 #   2 means send it twice (1 retry and on 2nd failure, send it to DLQ)
    DeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:custom.stageName}-dlq

  Outputs:
    sqsArn:
      Value: !GetAtt MainQueue.Arn
    sqsUrl:
      Value: !GetAtt MainQueue.QueueUrl
    dlqArn:
      Value: !GetAtt DeadLetterQueue.Arn
    dlqUrl:
      Value: !GetAtt DeadLetterQueue.QueueUrl

functions:
  jwtAuthorizer:
    handler: src/functions/authorizer/handler.handler
    description: Authorizer for JWT integration using Firebase
  post-actas:
    name: "post-actas"
    description: Guarda y procesa la imagen que suben los fiscales
    handler: src/functions/actas/post.handler
    events:
      - httpApi:
          method: POST
          path: /v1/actas
          authorizer:
            name: jwtAuthorizer
            type: jwt
          consumes:
            - "multipart/form-data"
          bodyType: "ActasRequest"
          responses:
            default: {}
            "201":
              name: "Content Accepted"
              bodyType: "ActasResponse"
  list-actas:
    handler: src/functions/actas/list.handler
    description: Ver actas cargadas por el usuario
    events:
      - httpApi:
          method: GET
          path: /v1/actas
          authorizer:
            name: jwtAuthorizer
            type: jwt
          responses:
            default: {}
            "200":
              name: "OK"
              bodyType: "ListActasResponse"
  get-actas:
    handler: src/functions/actas/get.handler
    description: Ver informacion del acta para la mesa
    events:
      - httpApi:
          method: GET
          path: /v1/actas/{mesaId}
          authorizer:
            name: jwtAuthorizer
            type: jwt
          responses:
            default: {}
            "200":
              name: "OK"
              bodyType: "EscrutionioMesaResponse"
  data-processing-splitter:
    handler: src/functions/data-processing/splitter.handler
    description: Events splitter
    events:
      - s3:
          bucket: ${env:BUCKET_NAME}
          event: s3:ObjectCreated:*
          rules:
            - prefix: payloads/
            - suffix: .json
          existing: true
