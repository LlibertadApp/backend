service: lla-api
frameworkVersion: "3"

provider:
  name: aws
  deploymentMethod: direct
  region: us-east-1
  runtime: nodejs18.x
  logRetentionInDays: 30
  iam:
    role:
      name: lla-api-lambda-role
      statements:
        - Effect: Allow
          Action:
            - "s3:*"
          Resource: "*"
        - Effect: Allow
          Action:
            - "cloudwatch:*"
            - "logs:*"
          Resource: "*"
        - Effect: Allow
          Action:
            - "lambda:InvokeFunction"
          Resource: "*"
  deploymentBucket:
    blockPublicAccess: true
    serverSideEncryption: AES256
  httpApi:
    name: "LLA"
    cors: true
    authorizers:
      jwtAuthorizer:
        type: jwt
        name: jwtAuthorizer
        functionName: jwtAuthorizer
        issuerUrl: https://securetoken.google.com/e-commerce-ebd01
        audience:
          - e-commerce-ebd01
        resultTtlInSeconds: 300
        identitySource:
          - $request.header.Authorization

plugins:
  - serverless-prune-plugin
  - serverless-webpack
  - serverless-dotenv-plugin
  - serverless-offline

custom:
  serverless-offline:
    ignoreJWTSignature: true
  prune:
    automatic: true
    number: 3
  webpack:
    excludeRegex: \.ts|test|\.map
    includeModules:
      forceExclude:
        - aws-sdk

package:
  excludeDevDependencies: true
  exclude:
    - ./**
  include:
    - ./src/**.ts

functions:
  jwtAuthorizer:
    handler: src/functions/authorizer/handler.handler
    description: Authorizer for JWT integration using Firebase
  get-config:
    name: "get-config"
    description: Get initial app config
    handler: src/functions/config/get.handler
    events:
      - httpApi:
          method: GET
          path: /config
          authorizer:
            name: jwtAuthorizer
            type: request
  post-actas:
    name: "post-actas"
    description: Guarda y procesa la imagen que suben los fiscales
    handler: src/functions/actas/post.handler
    events:
      - httpApi:
          method: POST
          path: /actas
          authorizer:
            name: jwtAuthorizer
  get-user:
    name: "get-user"
    description: Get user data
    handler: src/functions/users/get.handler
    events:
      - httpApi:
          method: GET
          path: /users/{id}
          authorizer:
            name: jwtAuthorizer
  post-user:
    handler: src/functions/users/post.handler
    description: Create a new user
    events:
      - httpApi:
          method: POST
          path: /users
          authorizer:
            name: jwtAuthorizer
  get-token:
    handler: src/functions/auth/post.handler
    description: Generate Auth Token
    events:
      - httpApi:
          method: POST
          path: /auth
          authorizer:
            name: null                